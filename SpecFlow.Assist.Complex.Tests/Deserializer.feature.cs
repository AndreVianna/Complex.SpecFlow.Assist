// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlow.Assist.Complex.Tests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class DeserializerFeature : object, Xunit.IClassFixture<DeserializerFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Deserializer.feature"
#line hidden
        
        public DeserializerFeature(DeserializerFeature.FixtureData fixtureData, SpecFlow_Assist_Complex_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "Deserializer", "Transforms table in complex types", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Complex class with vertical table")]
        [Xunit.TraitAttribute("FeatureTitle", "Deserializer")]
        [Xunit.TraitAttribute("Description", "Complex class with vertical table")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void ComplexClassWithVerticalTable()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Complex class with vertical table", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1.AddRow(new string[] {
                            "Id",
                            "1"});
#line 6
 testRunner.Given("I define a table like", ((string)(null)), table1, "Given ");
#line hidden
#line 9
 testRunner.When("I request a complex type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
 testRunner.Then("the result object should not be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 11
 testRunner.And("the \'Id\' property should be \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Complex class with basic properties")]
        [Xunit.TraitAttribute("FeatureTitle", "Deserializer")]
        [Xunit.TraitAttribute("Description", "Complex class with basic properties")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void ComplexClassWithBasicProperties()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Complex class with basic properties", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table2.AddRow(new string[] {
                            "Id",
                            "2"});
                table2.AddRow(new string[] {
                            "String",
                            "\"Some string.\""});
                table2.AddRow(new string[] {
                            "Integer",
                            "42"});
                table2.AddRow(new string[] {
                            "Decimal",
                            "3.141592"});
                table2.AddRow(new string[] {
                            "Boolean",
                            "True"});
                table2.AddRow(new string[] {
                            "DateTime",
                            "\"2020-02-20T12:34:56.789\""});
                table2.AddRow(new string[] {
                            "Guid",
                            "\"1f576fa6-16c9-4905-95f8-e00cad6a8ded\""});
#line 15
 testRunner.Given("I define a table like", ((string)(null)), table2, "Given ");
#line hidden
#line 24
 testRunner.When("I request a complex type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 25
 testRunner.Then("the result object should not be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
 testRunner.And("the \'Id\' property should be \'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
 testRunner.And("the \'String\' property should be \'Some string.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.And("the \'Integer\' property should be \'42\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
 testRunner.And("the \'Decimal\' property should be \'3.141592\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
 testRunner.And("the \'Boolean\' property should be \'True\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
 testRunner.And("the \'DateTime\' property should be \'2020-02-20T12:34:56.789\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
 testRunner.And("the \'Guid\' property should be \'1F576FA6-16C9-4905-95F8-E00CAD6A8DED\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Complex class with nullable properties")]
        [Xunit.TraitAttribute("FeatureTitle", "Deserializer")]
        [Xunit.TraitAttribute("Description", "Complex class with nullable properties")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void ComplexClassWithNullableProperties()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Complex class with nullable properties", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table3.AddRow(new string[] {
                            "Id",
                            "3"});
                table3.AddRow(new string[] {
                            "String",
                            "null"});
                table3.AddRow(new string[] {
                            "Integer",
                            "NULL"});
                table3.AddRow(new string[] {
                            "Decimal",
                            "Null"});
                table3.AddRow(new string[] {
                            "Boolean",
                            "default"});
                table3.AddRow(new string[] {
                            "DateTime",
                            ""});
                table3.AddRow(new string[] {
                            "Guid",
                            "DEFAULT"});
                table3.AddRow(new string[] {
                            "Complex",
                            "Default"});
#line 36
 testRunner.Given("I define a table like", ((string)(null)), table3, "Given ");
#line hidden
#line 46
 testRunner.When("I request a complex type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 47
 testRunner.Then("the result object should not be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 48
 testRunner.And("the \'Id\' property should be \'3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
 testRunner.And("the \'String\' property should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 50
 testRunner.And("the \'Integer\' property should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
 testRunner.And("the \'Decimal\' property should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
 testRunner.And("the \'Boolean\' property should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
 testRunner.And("the \'DateTime\' property should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
 testRunner.And("the \'Guid\' property should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
 testRunner.And("the \'Complex\' property should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Complex class with collection properties")]
        [Xunit.TraitAttribute("FeatureTitle", "Deserializer")]
        [Xunit.TraitAttribute("Description", "Complex class with collection properties")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void ComplexClassWithCollectionProperties()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Complex class with collection properties", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table4.AddRow(new string[] {
                            "Id",
                            "4"});
                table4.AddRow(new string[] {
                            "Lines[0]",
                            "\"Some line.\""});
                table4.AddRow(new string[] {
                            "Lines[1]",
                            "\"\""});
                table4.AddRow(new string[] {
                            "Lines[2]",
                            "\"Another line.\""});
                table4.AddRow(new string[] {
                            "Lines[3]",
                            "\"Last line.\""});
                table4.AddRow(new string[] {
                            "Numbers[0]",
                            "101"});
                table4.AddRow(new string[] {
                            "Numbers[1]",
                            "-201"});
                table4.AddRow(new string[] {
                            "Numbers[2]",
                            "0"});
#line 59
 testRunner.Given("I define a table like", ((string)(null)), table4, "Given ");
#line hidden
#line 69
 testRunner.When("I request a complex type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 70
 testRunner.Then("the result object should not be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 71
 testRunner.And("the \'Id\' property should be \'4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 72
 testRunner.And("the \'Lines\' property should have 4 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
 testRunner.And("the item 0 from \'Lines\' should be \'Some line.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
 testRunner.And("the item 1 from \'Lines\' should be \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
 testRunner.And("the item 2 from \'Lines\' should be \'Another line.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
 testRunner.And("the item 3 from \'Lines\' should be \'Last line.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
 testRunner.And("the \'Numbers\' property should have 3 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
 testRunner.And("the item 0 from \'Numbers\' should be \'101\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 79
 testRunner.And("the item 1 from \'Numbers\' should be \'-201\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 80
 testRunner.And("the item 2 from \'Numbers\' should be \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Complex class with complex properties")]
        [Xunit.TraitAttribute("FeatureTitle", "Deserializer")]
        [Xunit.TraitAttribute("Description", "Complex class with complex properties")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void ComplexClassWithComplexProperties()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer",
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Complex class with complex properties", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 84
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table5.AddRow(new string[] {
                            "Id",
                            "5"});
                table5.AddRow(new string[] {
                            "Children[0].Id",
                            "51"});
                table5.AddRow(new string[] {
                            "Children[0].String",
                            "\"Some string.\""});
                table5.AddRow(new string[] {
                            "Children[0].Integer",
                            "42"});
                table5.AddRow(new string[] {
                            "Children[1].Id",
                            "52"});
                table5.AddRow(new string[] {
                            "Children[1].Decimal",
                            "3.141592"});
                table5.AddRow(new string[] {
                            "Children[1].Boolean",
                            "False"});
                table5.AddRow(new string[] {
                            "Children[1].DateTime",
                            "\"2020-02-20T12:34:56.789\""});
                table5.AddRow(new string[] {
                            "Complex.Id",
                            "53"});
                table5.AddRow(new string[] {
                            "Complex.String",
                            "\"Some string.\""});
                table5.AddRow(new string[] {
                            "Complex.Integer",
                            "42"});
                table5.AddRow(new string[] {
                            "Complex.Decimal",
                            "3.141592"});
                table5.AddRow(new string[] {
                            "Complex.Boolean",
                            "True"});
                table5.AddRow(new string[] {
                            "Complex.DateTime",
                            "\"2020-02-20T12:34:56.789\""});
                table5.AddRow(new string[] {
                            "Complex.Complex.Id",
                            "531"});
                table5.AddRow(new string[] {
                            "Complex.Complex.Complex.Id",
                            "5311"});
#line 85
 testRunner.Given("I define a table like", ((string)(null)), table5, "Given ");
#line hidden
#line 103
 testRunner.When("I request a complex type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 104
 testRunner.Then("the result object should not be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 105
 testRunner.And("the \'Id\' property should be \'5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 106
 testRunner.And("the \'Children\' property should have 2 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table6.AddRow(new string[] {
                            "Id",
                            "51"});
                table6.AddRow(new string[] {
                            "String",
                            "\"Some string.\""});
                table6.AddRow(new string[] {
                            "Integer",
                            "42"});
#line 107
 testRunner.And("the item 0 from \'Children\' should be", ((string)(null)), table6, "And ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table7.AddRow(new string[] {
                            "Id",
                            "52"});
                table7.AddRow(new string[] {
                            "Decimal",
                            "3.141592"});
                table7.AddRow(new string[] {
                            "Boolean",
                            "False"});
                table7.AddRow(new string[] {
                            "DateTime",
                            "\"2020-02-20T12:34:56.789\""});
#line 112
 testRunner.And("the item 1 from \'Children\' should be", ((string)(null)), table7, "And ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table8.AddRow(new string[] {
                            "Id",
                            "53"});
                table8.AddRow(new string[] {
                            "String",
                            "\"Some string.\""});
                table8.AddRow(new string[] {
                            "Integer",
                            "42"});
                table8.AddRow(new string[] {
                            "Decimal",
                            "3.141592"});
                table8.AddRow(new string[] {
                            "Boolean",
                            "True"});
                table8.AddRow(new string[] {
                            "DateTime",
                            "\"2020-02-20T12:34:56.789\""});
                table8.AddRow(new string[] {
                            "Complex.Id",
                            "531"});
                table8.AddRow(new string[] {
                            "Complex.Complex.Id",
                            "5311"});
#line 118
 testRunner.And("the \'Complex\' property should be", ((string)(null)), table8, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Multi dimensional arrays")]
        [Xunit.TraitAttribute("FeatureTitle", "Deserializer")]
        [Xunit.TraitAttribute("Description", "Multi dimensional arrays")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void MultiDimensionalArrays()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multi dimensional arrays", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 130
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table9.AddRow(new string[] {
                            "Id",
                            "1"});
                table9.AddRow(new string[] {
                            "MultiDimensional[0][0][0]",
                            "1"});
                table9.AddRow(new string[] {
                            "MultiDimensional[0][0][1]",
                            "2"});
                table9.AddRow(new string[] {
                            "MultiDimensional[0][0][2]",
                            "3"});
                table9.AddRow(new string[] {
                            "MultiDimensional[0][1][0]",
                            "4"});
                table9.AddRow(new string[] {
                            "MultiDimensional[0][1][1]",
                            "5"});
                table9.AddRow(new string[] {
                            "MultiDimensional[0][1][2]",
                            "6"});
                table9.AddRow(new string[] {
                            "MultiDimensional[0][2][0]",
                            "7"});
                table9.AddRow(new string[] {
                            "MultiDimensional[0][2][1]",
                            "8"});
                table9.AddRow(new string[] {
                            "MultiDimensional[0][2][2]",
                            "9"});
                table9.AddRow(new string[] {
                            "MultiDimensional[1][0][0]",
                            "10"});
                table9.AddRow(new string[] {
                            "MultiDimensional[1][0][1]",
                            "11"});
                table9.AddRow(new string[] {
                            "MultiDimensional[1][0][2]",
                            "12"});
                table9.AddRow(new string[] {
                            "MultiDimensional[1][1][0]",
                            "13"});
                table9.AddRow(new string[] {
                            "MultiDimensional[1][1][1]",
                            "14"});
                table9.AddRow(new string[] {
                            "MultiDimensional[1][1][2]",
                            "15"});
                table9.AddRow(new string[] {
                            "MultiDimensional[1][2][0]",
                            "16"});
                table9.AddRow(new string[] {
                            "MultiDimensional[1][2][1]",
                            "17"});
                table9.AddRow(new string[] {
                            "MultiDimensional[1][2][2]",
                            "18"});
                table9.AddRow(new string[] {
                            "MultiDimensional[2][0][0]",
                            "19"});
                table9.AddRow(new string[] {
                            "MultiDimensional[2][0][1]",
                            "20"});
                table9.AddRow(new string[] {
                            "MultiDimensional[2][0][2]",
                            "21"});
                table9.AddRow(new string[] {
                            "MultiDimensional[2][1][0]",
                            "22"});
                table9.AddRow(new string[] {
                            "MultiDimensional[2][1][1]",
                            "23"});
                table9.AddRow(new string[] {
                            "MultiDimensional[2][1][2]",
                            "24"});
                table9.AddRow(new string[] {
                            "MultiDimensional[2][2][0]",
                            "25"});
                table9.AddRow(new string[] {
                            "MultiDimensional[2][2][1]",
                            "26"});
                table9.AddRow(new string[] {
                            "MultiDimensional[2][2][2]",
                            "27"});
#line 131
 testRunner.Given("I define a table like", ((string)(null)), table9, "Given ");
#line hidden
#line 161
 testRunner.When("I request a complex type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 162
 testRunner.Then("the \'MultiDimensional\' array property should have 3 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 163
 testRunner.And("the item 0 of the \'MultiDimensional\' array property should have 3 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 164
 testRunner.And("the item 0, 0 of the \'MultiDimensional\' array property should have 3 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 165
 testRunner.And("the item 0, 0, 0 of the \'MultiDimensional\' array property should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 166
 testRunner.And("the item 0, 0, 1 of the \'MultiDimensional\' array property should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 167
 testRunner.And("the item 0, 0, 2 of the \'MultiDimensional\' array property should be 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 168
 testRunner.And("the item 0, 1 of the \'MultiDimensional\' array property should have 3 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 169
 testRunner.And("the item 0, 1, 0 of the \'MultiDimensional\' array property should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 170
 testRunner.And("the item 0, 1, 1 of the \'MultiDimensional\' array property should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 171
 testRunner.And("the item 0, 1, 2 of the \'MultiDimensional\' array property should be 6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 172
 testRunner.And("the item 0, 2 of the \'MultiDimensional\' array property should have 3 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 173
 testRunner.And("the item 0, 2, 0 of the \'MultiDimensional\' array property should be 7", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 174
 testRunner.And("the item 0, 2, 1 of the \'MultiDimensional\' array property should be 8", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 175
 testRunner.And("the item 0, 2, 2 of the \'MultiDimensional\' array property should be 9", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 176
 testRunner.And("the item 1 of the \'MultiDimensional\' array property should have 3 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 177
 testRunner.And("the item 1, 0 of the \'MultiDimensional\' array property should have 3 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 178
 testRunner.And("the item 1, 0, 0 of the \'MultiDimensional\' array property should be 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 179
 testRunner.And("the item 1, 0, 1 of the \'MultiDimensional\' array property should be 11", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 180
 testRunner.And("the item 1, 0, 2 of the \'MultiDimensional\' array property should be 12", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 181
 testRunner.And("the item 1, 1 of the \'MultiDimensional\' array property should have 3 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 182
 testRunner.And("the item 1, 1, 0 of the \'MultiDimensional\' array property should be 13", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 183
 testRunner.And("the item 1, 1, 1 of the \'MultiDimensional\' array property should be 14", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 184
 testRunner.And("the item 1, 1, 2 of the \'MultiDimensional\' array property should be 15", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 185
 testRunner.And("the item 1, 2 of the \'MultiDimensional\' array property should have 3 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 186
 testRunner.And("the item 1, 2, 0 of the \'MultiDimensional\' array property should be 16", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 187
 testRunner.And("the item 1, 2, 1 of the \'MultiDimensional\' array property should be 17", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 188
 testRunner.And("the item 1, 2, 2 of the \'MultiDimensional\' array property should be 18", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 189
 testRunner.And("the item 2 of the \'MultiDimensional\' array property should have 3 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 190
 testRunner.And("the item 2, 0 of the \'MultiDimensional\' array property should have 3 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 191
 testRunner.And("the item 2, 0, 0 of the \'MultiDimensional\' array property should be 19", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 192
 testRunner.And("the item 2, 0, 1 of the \'MultiDimensional\' array property should be 20", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 193
 testRunner.And("the item 2, 0, 2 of the \'MultiDimensional\' array property should be 21", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 194
 testRunner.And("the item 2, 1 of the \'MultiDimensional\' array property should have 3 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 195
 testRunner.And("the item 2, 1, 0 of the \'MultiDimensional\' array property should be 22", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 196
 testRunner.And("the item 2, 1, 1 of the \'MultiDimensional\' array property should be 23", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 197
 testRunner.And("the item 2, 1, 2 of the \'MultiDimensional\' array property should be 24", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 198
 testRunner.And("the item 2, 2 of the \'MultiDimensional\' array property should have 3 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 199
 testRunner.And("the item 2, 2, 0 of the \'MultiDimensional\' array property should be 25", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 200
 testRunner.And("the item 2, 2, 1 of the \'MultiDimensional\' array property should be 26", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 201
 testRunner.And("the item 2, 2, 2 of the \'MultiDimensional\' array property should be 27", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Invalid property value")]
        [Xunit.TraitAttribute("FeatureTitle", "Deserializer")]
        [Xunit.TraitAttribute("Description", "Invalid property value")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void InvalidPropertyValue()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid property value", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 204
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table10.AddRow(new string[] {
                            "Id",
                            "{Invalide Value Format}"});
#line 205
 testRunner.Given("I define a table like", ((string)(null)), table10, "Given ");
#line hidden
#line 208
 testRunner.When("I request a complex type from an invalid table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 209
 testRunner.Then("the process should throw InvalidCastException for property \'Id\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                DeserializerFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                DeserializerFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
