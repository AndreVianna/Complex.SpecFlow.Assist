// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Complex.SpecFlow.Assist.Tests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class VerticalDeserializerFeature : object, Xunit.IClassFixture<VerticalDeserializerFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "VerticalDeserializer.feature"
#line hidden
        
        public VerticalDeserializerFeature(VerticalDeserializerFeature.FixtureData fixtureData, Complex_SpecFlow_Assist_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "Vertical deserializer", "Transforms a vertical table in complex object", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Using vertical table")]
        [Xunit.TraitAttribute("FeatureTitle", "Vertical deserializer")]
        [Xunit.TraitAttribute("Description", "Using vertical table")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void UsingVerticalTable()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Using vertical table", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table42.AddRow(new string[] {
                            "Id",
                            "1"});
#line 6
 testRunner.Given("I define a table like", ((string)(null)), table42, "Given ");
#line hidden
#line 9
 testRunner.When("I request a complex instance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
 testRunner.Then("the result object should not be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 11
 testRunner.And("the \'Id\' property should be \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="With basic properties")]
        [Xunit.TraitAttribute("FeatureTitle", "Vertical deserializer")]
        [Xunit.TraitAttribute("Description", "With basic properties")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void WithBasicProperties()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With basic properties", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table43.AddRow(new string[] {
                            "Id",
                            "2"});
                table43.AddRow(new string[] {
                            "String",
                            "Some string."});
                table43.AddRow(new string[] {
                            "Integer",
                            "42"});
                table43.AddRow(new string[] {
                            "Decimal",
                            "3.141592"});
                table43.AddRow(new string[] {
                            "Boolean",
                            "True"});
                table43.AddRow(new string[] {
                            "DateTime",
                            "\'2020-02-20T12:34:56.789\'"});
                table43.AddRow(new string[] {
                            "Guid",
                            "\"1f576fa6-16c9-4905-95f8-e00cad6a8ded\""});
#line 15
 testRunner.Given("I define a table like", ((string)(null)), table43, "Given ");
#line hidden
#line 24
 testRunner.When("I request a complex instance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 25
 testRunner.Then("the result object should not be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
 testRunner.And("the \'Id\' property should be \'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
 testRunner.And("the \'String\' property should be \'Some string.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.And("the \'Integer\' property should be \'42\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
 testRunner.And("the \'Decimal\' property should be \'3.141592\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
 testRunner.And("the \'Boolean\' property should be \'True\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
 testRunner.And("the \'DateTime\' property should be \'2020-02-20T12:34:56.789\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
 testRunner.And("the \'Guid\' property should be \'1F576FA6-16C9-4905-95F8-E00CAD6A8DED\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="With nullable properties")]
        [Xunit.TraitAttribute("FeatureTitle", "Vertical deserializer")]
        [Xunit.TraitAttribute("Description", "With nullable properties")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void WithNullableProperties()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With nullable properties", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table44.AddRow(new string[] {
                            "Id",
                            "3"});
                table44.AddRow(new string[] {
                            "String",
                            "null"});
                table44.AddRow(new string[] {
                            "Integer",
                            "NULL"});
                table44.AddRow(new string[] {
                            "Decimal",
                            "Null"});
                table44.AddRow(new string[] {
                            "Boolean",
                            "default"});
                table44.AddRow(new string[] {
                            "DateTime",
                            ""});
                table44.AddRow(new string[] {
                            "Guid",
                            "DEFAULT"});
                table44.AddRow(new string[] {
                            "Complex",
                            "Default"});
#line 36
 testRunner.Given("I define a table like", ((string)(null)), table44, "Given ");
#line hidden
#line 46
 testRunner.When("I request a complex instance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 47
 testRunner.Then("the result object should not be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 48
 testRunner.And("the \'Id\' property should be \'3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
 testRunner.And("the \'String\' property should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 50
 testRunner.And("the \'Integer\' property should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
 testRunner.And("the \'Decimal\' property should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
 testRunner.And("the \'Boolean\' property should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
 testRunner.And("the \'DateTime\' property should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
 testRunner.And("the \'Guid\' property should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
 testRunner.And("the \'Complex\' property should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="With collection properties")]
        [Xunit.TraitAttribute("FeatureTitle", "Vertical deserializer")]
        [Xunit.TraitAttribute("Description", "With collection properties")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void WithCollectionProperties()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With collection properties", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table45.AddRow(new string[] {
                            "Id",
                            "4"});
                table45.AddRow(new string[] {
                            "Lines[0]",
                            "\"Some line.\""});
                table45.AddRow(new string[] {
                            "Lines[1]",
                            "\"\""});
                table45.AddRow(new string[] {
                            "Lines[2]",
                            "\"Another line.\""});
                table45.AddRow(new string[] {
                            "Lines[3]",
                            "\"Last line.\""});
                table45.AddRow(new string[] {
                            "Numbers[0]",
                            "101"});
                table45.AddRow(new string[] {
                            "Numbers[1]",
                            "-201"});
                table45.AddRow(new string[] {
                            "Numbers[2]",
                            "0"});
#line 59
 testRunner.Given("I define a table like", ((string)(null)), table45, "Given ");
#line hidden
#line 69
 testRunner.When("I request a complex instance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 70
 testRunner.Then("the result object should not be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 71
 testRunner.And("the \'Id\' property should be \'4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 72
 testRunner.And("the \'Lines\' property should have 4 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
 testRunner.And("the item 0 from \'Lines\' should be \'Some line.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
 testRunner.And("the item 1 from \'Lines\' should be \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
 testRunner.And("the item 2 from \'Lines\' should be \'Another line.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
 testRunner.And("the item 3 from \'Lines\' should be \'Last line.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
 testRunner.And("the \'Numbers\' property should have 3 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
 testRunner.And("the item 0 from \'Numbers\' should be \'101\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 79
 testRunner.And("the item 1 from \'Numbers\' should be \'-201\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 80
 testRunner.And("the item 2 from \'Numbers\' should be \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="With complex properties")]
        [Xunit.TraitAttribute("FeatureTitle", "Vertical deserializer")]
        [Xunit.TraitAttribute("Description", "With complex properties")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void WithComplexProperties()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With complex properties", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 83
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table46.AddRow(new string[] {
                            "Id",
                            "5"});
                table46.AddRow(new string[] {
                            "Children[0].Id",
                            "51"});
                table46.AddRow(new string[] {
                            "Children[0].String",
                            "\"Some string.\""});
                table46.AddRow(new string[] {
                            "Children[0].Integer",
                            "42"});
                table46.AddRow(new string[] {
                            "Children[1].Id",
                            "52"});
                table46.AddRow(new string[] {
                            "Children[1].Decimal",
                            "3.141592"});
                table46.AddRow(new string[] {
                            "Children[1].Boolean",
                            "False"});
                table46.AddRow(new string[] {
                            "Children[1].DateTime",
                            "\"2020-02-20T12:34:56.789\""});
                table46.AddRow(new string[] {
                            "Complex.Id",
                            "53"});
                table46.AddRow(new string[] {
                            "Complex.Complex.Id",
                            "531"});
                table46.AddRow(new string[] {
                            "Complex.Complex.Complex.Id",
                            "5311"});
                table46.AddRow(new string[] {
                            "Complex.String",
                            "\"Some string.\""});
                table46.AddRow(new string[] {
                            "Complex.Integer",
                            "42"});
                table46.AddRow(new string[] {
                            "Complex.Decimal",
                            "3.141592"});
                table46.AddRow(new string[] {
                            "Complex.Boolean",
                            "True"});
                table46.AddRow(new string[] {
                            "Complex.DateTime",
                            "\"2020-02-20T12:34:56.789\""});
#line 84
 testRunner.Given("I define a table like", ((string)(null)), table46, "Given ");
#line hidden
#line 102
 testRunner.When("I request a complex instance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 103
 testRunner.Then("the result object should not be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 104
 testRunner.And("the \'Id\' property should be \'5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 105
 testRunner.And("the \'Children\' property should have 2 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table47.AddRow(new string[] {
                            "Id",
                            "51"});
                table47.AddRow(new string[] {
                            "String",
                            "\"Some string.\""});
                table47.AddRow(new string[] {
                            "Integer",
                            "42"});
#line 106
 testRunner.And("the item 0 from \'Children\' should be", ((string)(null)), table47, "And ");
#line hidden
                TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table48.AddRow(new string[] {
                            "Id",
                            "52"});
                table48.AddRow(new string[] {
                            "Decimal",
                            "3.141592"});
                table48.AddRow(new string[] {
                            "Boolean",
                            "False"});
                table48.AddRow(new string[] {
                            "DateTime",
                            "\"2020-02-20T12:34:56.789\""});
#line 111
 testRunner.And("the item 1 from \'Children\' should be", ((string)(null)), table48, "And ");
#line hidden
                TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table49.AddRow(new string[] {
                            "Id",
                            "53"});
                table49.AddRow(new string[] {
                            "String",
                            "\"Some string.\""});
                table49.AddRow(new string[] {
                            "Integer",
                            "42"});
                table49.AddRow(new string[] {
                            "Decimal",
                            "3.141592"});
                table49.AddRow(new string[] {
                            "Boolean",
                            "True"});
                table49.AddRow(new string[] {
                            "DateTime",
                            "\"2020-02-20T12:34:56.789\""});
                table49.AddRow(new string[] {
                            "Complex.Id",
                            "531"});
                table49.AddRow(new string[] {
                            "Complex.Complex.Id",
                            "5311"});
#line 117
 testRunner.And("the \'Complex\' property should be", ((string)(null)), table49, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="With multi-dimensional arrays")]
        [Xunit.TraitAttribute("FeatureTitle", "Vertical deserializer")]
        [Xunit.TraitAttribute("Description", "With multi-dimensional arrays")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void WithMulti_DimensionalArrays()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With multi-dimensional arrays", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 129
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table50.AddRow(new string[] {
                            "Id",
                            "6"});
                table50.AddRow(new string[] {
                            "Items[0][0][0]",
                            "1"});
                table50.AddRow(new string[] {
                            "Items[0][0][1]",
                            "2"});
                table50.AddRow(new string[] {
                            "Items[0][0][2]",
                            "3"});
                table50.AddRow(new string[] {
                            "Items[0][1][0]",
                            "4"});
                table50.AddRow(new string[] {
                            "Items[0][1][1]",
                            "5"});
                table50.AddRow(new string[] {
                            "Items[0][1][2]",
                            "6"});
                table50.AddRow(new string[] {
                            "Items[1][0][0]",
                            "7"});
                table50.AddRow(new string[] {
                            "Items[1][0][1]",
                            "8"});
                table50.AddRow(new string[] {
                            "Items[1][0][2]",
                            "9"});
                table50.AddRow(new string[] {
                            "Items[1][1][0]",
                            "10"});
                table50.AddRow(new string[] {
                            "Items[1][1][1]",
                            "11"});
                table50.AddRow(new string[] {
                            "Items[1][1][2]",
                            "12"});
                table50.AddRow(new string[] {
                            "Items[1][2][0]",
                            "13"});
                table50.AddRow(new string[] {
                            "Items[1][2][1]",
                            "14"});
                table50.AddRow(new string[] {
                            "Items[1][2][2]",
                            "15"});
                table50.AddRow(new string[] {
                            "Items[2][0][0]",
                            "16"});
                table50.AddRow(new string[] {
                            "Items[2][0][1]",
                            "17"});
                table50.AddRow(new string[] {
                            "Items[2][0][2]",
                            "18"});
                table50.AddRow(new string[] {
                            "Items[2][1][0]",
                            "19"});
                table50.AddRow(new string[] {
                            "Items[2][1][1]",
                            "20"});
                table50.AddRow(new string[] {
                            "Items[2][1][2]",
                            "21"});
                table50.AddRow(new string[] {
                            "Items[2][2][0]",
                            "22"});
                table50.AddRow(new string[] {
                            "Items[2][2][1]",
                            "23"});
                table50.AddRow(new string[] {
                            "Items[2][2][2]",
                            "24"});
                table50.AddRow(new string[] {
                            "Items[3][0][0]",
                            "25"});
                table50.AddRow(new string[] {
                            "Items[3][0][1]",
                            "26"});
                table50.AddRow(new string[] {
                            "Items[3][0][2]",
                            "27"});
#line 130
 testRunner.Given("I define a table like", ((string)(null)), table50, "Given ");
#line hidden
#line 160
 testRunner.When("I request a complex instance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 161
 testRunner.Then("the result object should not be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 162
 testRunner.And("the \'Id\' property should be \'6\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 163
 testRunner.And("the \'Items\' property should have 4 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 164
 testRunner.And("the item 0 of the \'Items\' property should have 2 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 165
 testRunner.And("the item 0, 0 of the \'Items\' property should have 3 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 166
 testRunner.And("the item 0, 0, 0 of the \'Items\' property should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 167
 testRunner.And("the item 0, 0, 1 of the \'Items\' property should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 168
 testRunner.And("the item 0, 0, 2 of the \'Items\' property should be 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 169
 testRunner.And("the item 0, 1 of the \'Items\' property should have 3 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 170
 testRunner.And("the item 0, 1, 0 of the \'Items\' property should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 171
 testRunner.And("the item 0, 1, 1 of the \'Items\' property should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 172
 testRunner.And("the item 0, 1, 2 of the \'Items\' property should be 6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 173
 testRunner.And("the item 1 of the \'Items\' property should have 3 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 174
 testRunner.And("the item 1, 0 of the \'Items\' property should have 3 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 175
 testRunner.And("the item 1, 0, 0 of the \'Items\' property should be 7", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 176
 testRunner.And("the item 1, 0, 1 of the \'Items\' property should be 8", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 177
 testRunner.And("the item 1, 0, 2 of the \'Items\' property should be 9", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 178
 testRunner.And("the item 1, 1 of the \'Items\' property should have 3 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 179
 testRunner.And("the item 1, 1, 0 of the \'Items\' property should be 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 180
 testRunner.And("the item 1, 1, 1 of the \'Items\' property should be 11", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 181
 testRunner.And("the item 1, 1, 2 of the \'Items\' property should be 12", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 182
 testRunner.And("the item 1, 2 of the \'Items\' property should have 3 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 183
 testRunner.And("the item 1, 2, 0 of the \'Items\' property should be 13", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 184
 testRunner.And("the item 1, 2, 1 of the \'Items\' property should be 14", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 185
 testRunner.And("the item 1, 2, 2 of the \'Items\' property should be 15", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 186
 testRunner.And("the item 2 of the \'Items\' property should have 3 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 187
 testRunner.And("the item 2, 0 of the \'Items\' property should have 3 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 188
 testRunner.And("the item 2, 0, 0 of the \'Items\' property should be 16", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 189
 testRunner.And("the item 2, 0, 1 of the \'Items\' property should be 17", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 190
 testRunner.And("the item 2, 0, 2 of the \'Items\' property should be 18", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 191
 testRunner.And("the item 2, 1 of the \'Items\' property should have 3 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 192
 testRunner.And("the item 2, 1, 0 of the \'Items\' property should be 19", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 193
 testRunner.And("the item 2, 1, 1 of the \'Items\' property should be 20", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 194
 testRunner.And("the item 2, 1, 2 of the \'Items\' property should be 21", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 195
 testRunner.And("the item 2, 2 of the \'Items\' property should have 3 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 196
 testRunner.And("the item 2, 2, 0 of the \'Items\' property should be 22", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 197
 testRunner.And("the item 2, 2, 1 of the \'Items\' property should be 23", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 198
 testRunner.And("the item 2, 2, 2 of the \'Items\' property should be 24", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 199
 testRunner.And("the item 3 of the \'Items\' property should have 1 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 200
 testRunner.And("the item 3, 0 of the \'Items\' property should have 3 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 201
 testRunner.And("the item 3, 0, 0 of the \'Items\' property should be 25", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 202
 testRunner.And("the item 3, 0, 1 of the \'Items\' property should be 26", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 203
 testRunner.And("the item 3, 0, 2 of the \'Items\' property should be 27", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="With dictionary property")]
        [Xunit.TraitAttribute("FeatureTitle", "Vertical deserializer")]
        [Xunit.TraitAttribute("Description", "With dictionary property")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void WithDictionaryProperty()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With dictionary property", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 206
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table51.AddRow(new string[] {
                            "Id",
                            "7"});
                table51.AddRow(new string[] {
                            "Dictionary.Father",
                            "\"John\""});
                table51.AddRow(new string[] {
                            "Dictionary.Mother",
                            "\"Ana\""});
                table51.AddRow(new string[] {
                            "Dictionary.Son",
                            "\"Billy\""});
                table51.AddRow(new string[] {
                            "Dictionary.Daughter",
                            "\"Cindy\""});
#line 207
 testRunner.Given("I define a table like", ((string)(null)), table51, "Given ");
#line hidden
#line 214
 testRunner.When("I request a complex instance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 215
 testRunner.Then("the result object should not be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 216
 testRunner.And("the \'Id\' property should be \'7\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 217
 testRunner.And("the \'Dictionary\' property should have 4 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 218
 testRunner.And("the \'Father\' key from the \'Dictionary\' property should be \'John\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 219
 testRunner.And("the \'Mother\' key from the \'Dictionary\' property should be \'Ana\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 220
 testRunner.And("the \'Son\' key from the \'Dictionary\' property should be \'Billy\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 221
 testRunner.And("the \'Daughter\' key from the \'Dictionary\' property should be \'Cindy\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="With very complex property")]
        [Xunit.TraitAttribute("FeatureTitle", "Vertical deserializer")]
        [Xunit.TraitAttribute("Description", "With very complex property")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void WithVeryComplexProperty()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With very complex property", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 224
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table52.AddRow(new string[] {
                            "Id",
                            "9"});
                table52.AddRow(new string[] {
                            "Crazy[0].Red.Id",
                            "901"});
                table52.AddRow(new string[] {
                            "Crazy[0].Green.Id",
                            "902"});
                table52.AddRow(new string[] {
                            "Crazy[1].Blue.Id",
                            "911"});
                table52.AddRow(new string[] {
                            "Crazy[1].White.Id",
                            "912"});
                table52.AddRow(new string[] {
                            "Crazy[1].Black.Id",
                            "913"});
#line 225
 testRunner.Given("I define a table like", ((string)(null)), table52, "Given ");
#line hidden
#line 233
 testRunner.When("I request a complex instance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 234
 testRunner.Then("the result object should not be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 235
 testRunner.And("the \'Id\' property should be \'9\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 236
 testRunner.And("the \'Crazy\' property should have 2 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 237
 testRunner.And("the item 0 of the \'Crazy\' property should have 2 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 238
 testRunner.And("the item 1 of the \'Crazy\' property should have 3 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 239
 testRunner.And("the \'Id\' property of the \'Red\' key of the item 0 of the \'Crazy\' property should b" +
                        "e \'901\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 240
 testRunner.And("the \'Id\' property of the \'Green\' key of the item 0 of the \'Crazy\' property should" +
                        " be \'902\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 241
 testRunner.And("the \'Id\' property of the \'Blue\' key of the item 1 of the \'Crazy\' property should " +
                        "be \'911\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 242
 testRunner.And("the \'Id\' property of the \'White\' key of the item 1 of the \'Crazy\' property should" +
                        " be \'912\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 243
 testRunner.And("the \'Id\' property of the \'Black\' key of the item 1 of the \'Crazy\' property should" +
                        " be \'913\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="With tuple property")]
        [Xunit.TraitAttribute("FeatureTitle", "Vertical deserializer")]
        [Xunit.TraitAttribute("Description", "With tuple property")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void WithTupleProperty()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With tuple property", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 246
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table53.AddRow(new string[] {
                            "Id",
                            "8"});
                table53.AddRow(new string[] {
                            "SimpleTuple.Item1",
                            "\"Smith\""});
                table53.AddRow(new string[] {
                            "SimpleTuple.Item2",
                            "7"});
                table53.AddRow(new string[] {
                            "SimpleTuple.Item3",
                            "False"});
                table53.AddRow(new string[] {
                            "NamedTuple.Item1",
                            "\"Neo\""});
                table53.AddRow(new string[] {
                            "NamedTuple.Item2",
                            "42"});
#line 247
 testRunner.Given("I define a table like", ((string)(null)), table53, "Given ");
#line hidden
#line 255
 testRunner.When("I request a complex instance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 256
 testRunner.Then("the result object should not be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 257
 testRunner.And("the \'Id\' property should be \'8\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 258
 testRunner.And("the \'Item1\' key from the \'SimpleTuple\' property should be \'Smith\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 259
 testRunner.And("the \'Item2\' key from the \'SimpleTuple\' property should be \'7\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 260
 testRunner.And("the \'Item3\' key from the \'SimpleTuple\' property should be \'False\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 261
 testRunner.And("the \'Name\' key from the \'NamedTuple\' property should be \'Neo\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 262
 testRunner.And("the \'Power\' key from the \'NamedTuple\' property should be \'42\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Property value must be of a valid type")]
        [Xunit.TraitAttribute("FeatureTitle", "Vertical deserializer")]
        [Xunit.TraitAttribute("Description", "Property value must be of a valid type")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void PropertyValueMustBeOfAValidType()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Property value must be of a valid type", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 265
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table54.AddRow(new string[] {
                            "Id",
                            "Invalid Value Format"});
#line 266
 testRunner.Given("I define a table like", ((string)(null)), table54, "Given ");
#line hidden
#line 269
 testRunner.When("I request a complex instance with an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 270
 testRunner.Then("it should throw \'InvalidCastException\' with message \"The value at \'Id\' is not of " +
                        "the correct type.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Property inner value must be of a valid type")]
        [Xunit.TraitAttribute("FeatureTitle", "Vertical deserializer")]
        [Xunit.TraitAttribute("Description", "Property inner value must be of a valid type")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void PropertyInnerValueMustBeOfAValidType()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Property inner value must be of a valid type", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 273
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table55.AddRow(new string[] {
                            "Id",
                            "67"});
                table55.AddRow(new string[] {
                            "Complex.Id",
                            "Invalid Value Format"});
#line 274
 testRunner.Given("I define a table like", ((string)(null)), table55, "Given ");
#line hidden
#line 278
 testRunner.When("I request a complex instance with an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 279
 testRunner.Then("it should throw \'InvalidCastException\' with message \"The value at \'Complex.Id\' is" +
                        " not of the correct type.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Property array inner value must be of a valid type")]
        [Xunit.TraitAttribute("FeatureTitle", "Vertical deserializer")]
        [Xunit.TraitAttribute("Description", "Property array inner value must be of a valid type")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void PropertyArrayInnerValueMustBeOfAValidType()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Property array inner value must be of a valid type", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 282
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table56.AddRow(new string[] {
                            "Id",
                            "37"});
                table56.AddRow(new string[] {
                            "Children[0].Id",
                            "43"});
                table56.AddRow(new string[] {
                            "Children[1].Id",
                            "Invalid Value Format"});
#line 283
 testRunner.Given("I define a table like", ((string)(null)), table56, "Given ");
#line hidden
#line 288
 testRunner.When("I request a complex instance with an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 289
 testRunner.Then("it should throw \'InvalidCastException\' with message \"The value at \'Children[1].Id" +
                        "\' is not of the correct type.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Collection property index must be an number")]
        [Xunit.TraitAttribute("FeatureTitle", "Vertical deserializer")]
        [Xunit.TraitAttribute("Description", "Collection property index must be an number")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void CollectionPropertyIndexMustBeAnNumber()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Collection property index must be an number", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 292
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table57.AddRow(new string[] {
                            "Id",
                            "99"});
                table57.AddRow(new string[] {
                            "Lines[abc]",
                            "\"Some line.\""});
#line 293
 testRunner.Given("I define a table like", ((string)(null)), table57, "Given ");
#line hidden
#line 297
 testRunner.When("I request a complex instance with an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 298
 testRunner.Then("it should throw \'InvalidDataException\' with message \"Invalid array index at \'Line" +
                        "s[abc]\'.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Collection property index must start at 0")]
        [Xunit.TraitAttribute("FeatureTitle", "Vertical deserializer")]
        [Xunit.TraitAttribute("Description", "Collection property index must start at 0")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void CollectionPropertyIndexMustStartAt0()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Collection property index must start at 0", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 301
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table58.AddRow(new string[] {
                            "Id",
                            "99"});
                table58.AddRow(new string[] {
                            "Lines[1]",
                            "\"Some line.\""});
#line 302
 testRunner.Given("I define a table like", ((string)(null)), table58, "Given ");
#line hidden
#line 306
 testRunner.When("I request a complex instance with an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 307
 testRunner.Then("it should throw \'InvalidDataException\' with message \"Invalid array index at \'Line" +
                        "s[1]\'.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Collection property index must not be negative")]
        [Xunit.TraitAttribute("FeatureTitle", "Vertical deserializer")]
        [Xunit.TraitAttribute("Description", "Collection property index must not be negative")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void CollectionPropertyIndexMustNotBeNegative()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Collection property index must not be negative", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 310
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table59.AddRow(new string[] {
                            "Id",
                            "99"});
                table59.AddRow(new string[] {
                            "Lines[-1]",
                            "\"Some line.\""});
#line 311
 testRunner.Given("I define a table like", ((string)(null)), table59, "Given ");
#line hidden
#line 315
 testRunner.When("I request a complex instance with an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 316
 testRunner.Then("it should throw \'InvalidDataException\' with message \"Invalid array index at \'Line" +
                        "s[-1]\'.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Collection property index must be in sequence")]
        [Xunit.TraitAttribute("FeatureTitle", "Vertical deserializer")]
        [Xunit.TraitAttribute("Description", "Collection property index must be in sequence")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void CollectionPropertyIndexMustBeInSequence()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Collection property index must be in sequence", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 319
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table60.AddRow(new string[] {
                            "Id",
                            "99"});
                table60.AddRow(new string[] {
                            "Lines[0]",
                            "\"Some line.\""});
                table60.AddRow(new string[] {
                            "Lines[2]",
                            "\"Some other line.\""});
#line 320
 testRunner.Given("I define a table like", ((string)(null)), table60, "Given ");
#line hidden
#line 325
 testRunner.When("I request a complex instance with an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 326
 testRunner.Then("it should throw \'InvalidDataException\' with message \"Invalid array index at \'Line" +
                        "s[2]\'.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Collection property index cannot repeat")]
        [Xunit.TraitAttribute("FeatureTitle", "Vertical deserializer")]
        [Xunit.TraitAttribute("Description", "Collection property index cannot repeat")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void CollectionPropertyIndexCannotRepeat()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Collection property index cannot repeat", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 329
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table61.AddRow(new string[] {
                            "Id",
                            "99"});
                table61.AddRow(new string[] {
                            "Lines[0]",
                            "\"Some line.\""});
                table61.AddRow(new string[] {
                            "Lines[0]",
                            "\"Some other line.\""});
#line 330
 testRunner.Given("I define a table like", ((string)(null)), table61, "Given ");
#line hidden
#line 335
 testRunner.When("I request a complex instance with an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 336
 testRunner.Then("it should throw \'InvalidDataException\' with message \"Invalid array index at \'Line" +
                        "s[0]\'.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                VerticalDeserializerFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                VerticalDeserializerFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
