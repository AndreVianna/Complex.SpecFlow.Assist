// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Complex.SpecFlow.Assist.Tests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class DeserializationContextFeature : object, Xunit.IClassFixture<DeserializationContextFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "DeserializatonContext.feature"
#line hidden
        
        public DeserializationContextFeature(DeserializationContextFeature.FixtureData fixtureData, Complex_SpecFlow_Assist_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "Deserialization context", "Use a deserialization context to store pre-defined objects and use during the des" +
                    "erialization process", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Using vertical table get an intance from a stored object")]
        [Xunit.TraitAttribute("FeatureTitle", "Deserialization context")]
        [Xunit.TraitAttribute("Description", "Using vertical table get an intance from a stored object")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void UsingVerticalTableGetAnIntanceFromAStoredObject()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Using vertical table get an intance from a stored object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1.AddRow(new string[] {
                            "Id",
                            "1"});
#line 6
 testRunner.Given("I define a table like", ((string)(null)), table1, "Given ");
#line hidden
#line 9
 testRunner.And("store as an instance in a context under \'StoredObject\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table2.AddRow(new string[] {
                            "Id",
                            "2"});
                table2.AddRow(new string[] {
                            "Complex",
                            "{StoredObject}"});
#line 10
 testRunner.And("I define a table like", ((string)(null)), table2, "And ");
#line hidden
#line 14
 testRunner.When("I request a complex instance with a context", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
 testRunner.Then("the result object should not be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table3.AddRow(new string[] {
                            "Id",
                            "2"});
                table3.AddRow(new string[] {
                            "Complex.Id",
                            "1"});
#line 16
 testRunner.And("the result object should be", ((string)(null)), table3, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Using horizontal table for primitive types")]
        [Xunit.TraitAttribute("FeatureTitle", "Deserialization context")]
        [Xunit.TraitAttribute("Description", "Using horizontal table for primitive types")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void UsingHorizontalTableForPrimitiveTypes()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Using horizontal table for primitive types", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "{self}"});
                table4.AddRow(new string[] {
                            "E7BD910E-B939-4711-978E-C6D81AC037D8"});
                table4.AddRow(new string[] {
                            "3346B887-5219-43DE-980D-213985D33847"});
                table4.AddRow(new string[] {
                            "CADA29E3-A126-48F7-81BD-F07083773A6A"});
                table4.AddRow(new string[] {
                            "B7B95D5B-CE20-4FE4-987D-694511AF880C"});
                table4.AddRow(new string[] {
                            "5E882615-E83A-45BD-A950-AD61633BEE9A"});
                table4.AddRow(new string[] {
                            "BE61A824-52B0-42BC-978B-A23AF10B06EB"});
                table4.AddRow(new string[] {
                            "30D73007-9D42-48B8-8D09-E67485EC01D7"});
#line 23
 testRunner.Given("I define a table like", ((string)(null)), table4, "Given ");
#line hidden
#line 32
 testRunner.And("store as a set of strings in a context under \'Guids\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Guid"});
                table5.AddRow(new string[] {
                            "101",
                            "{Guids:3}"});
                table5.AddRow(new string[] {
                            "201",
                            "{Guids:2}"});
                table5.AddRow(new string[] {
                            "301",
                            "{Guids:1}"});
                table5.AddRow(new string[] {
                            "401",
                            "{Guids:0}"});
#line 33
 testRunner.And("I define a table like", ((string)(null)), table5, "And ");
#line hidden
#line 39
 testRunner.When("I request a complex set with a context", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 40
 testRunner.Then("the result collection should have 4 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 41
 testRunner.And("the \'Id\' property of the item 0 should be \'101\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
 testRunner.And("the \'Guid\' property of the item 0 should be \'B7B95D5B-CE20-4FE4-987D-694511AF880C" +
                        "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
 testRunner.And("the \'Id\' property of the item 2 should be \'301\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
 testRunner.And("the \'Guid\' property of the item 2 should be \'3346B887-5219-43DE-980D-213985D33847" +
                        "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Using vertical table get single item form a stored collection")]
        [Xunit.TraitAttribute("FeatureTitle", "Deserialization context")]
        [Xunit.TraitAttribute("Description", "Using vertical table get single item form a stored collection")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void UsingVerticalTableGetSingleItemFormAStoredCollection()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Using vertical table get single item form a stored collection", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
                table6.AddRow(new string[] {
                            "10"});
                table6.AddRow(new string[] {
                            "20"});
                table6.AddRow(new string[] {
                            "30"});
                table6.AddRow(new string[] {
                            "40"});
#line 48
 testRunner.Given("I define a table like", ((string)(null)), table6, "Given ");
#line hidden
#line 54
 testRunner.And("store as a set in a context under \'StoredArray\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table7.AddRow(new string[] {
                            "Id",
                            "2"});
                table7.AddRow(new string[] {
                            "Complex",
                            "{StoredArray:2}"});
#line 55
 testRunner.And("I define a table like", ((string)(null)), table7, "And ");
#line hidden
#line 59
 testRunner.When("I request a complex instance with a context", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 60
 testRunner.Then("the result object should not be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table8.AddRow(new string[] {
                            "Id",
                            "2"});
                table8.AddRow(new string[] {
                            "Complex.Id",
                            "30"});
#line 61
 testRunner.And("the result object should be", ((string)(null)), table8, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Using vertical table get the whole list from a stored collection")]
        [Xunit.TraitAttribute("FeatureTitle", "Deserialization context")]
        [Xunit.TraitAttribute("Description", "Using vertical table get the whole list from a stored collection")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void UsingVerticalTableGetTheWholeListFromAStoredCollection()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Using vertical table get the whole list from a stored collection", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 67
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
                table9.AddRow(new string[] {
                            "10"});
                table9.AddRow(new string[] {
                            "20"});
                table9.AddRow(new string[] {
                            "30"});
                table9.AddRow(new string[] {
                            "40"});
#line 68
 testRunner.Given("I define a table like", ((string)(null)), table9, "Given ");
#line hidden
#line 74
 testRunner.And("store as a set in a context under \'StoredArray\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table10.AddRow(new string[] {
                            "Id",
                            "2"});
                table10.AddRow(new string[] {
                            "Children",
                            "[StoredArray]"});
#line 75
 testRunner.And("I define a table like", ((string)(null)), table10, "And ");
#line hidden
#line 79
 testRunner.When("I request a complex instance with a context", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 80
 testRunner.Then("the result object should not be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table11.AddRow(new string[] {
                            "Id",
                            "2"});
                table11.AddRow(new string[] {
                            "Children[0].Id",
                            "10"});
                table11.AddRow(new string[] {
                            "Children[1].Id",
                            "20"});
                table11.AddRow(new string[] {
                            "Children[2].Id",
                            "30"});
                table11.AddRow(new string[] {
                            "Children[3].Id",
                            "40"});
#line 81
 testRunner.And("the result object should be", ((string)(null)), table11, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Using vertical table get selected items from a stored collection")]
        [Xunit.TraitAttribute("FeatureTitle", "Deserialization context")]
        [Xunit.TraitAttribute("Description", "Using vertical table get selected items from a stored collection")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void UsingVerticalTableGetSelectedItemsFromAStoredCollection()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Using vertical table get selected items from a stored collection", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 90
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
                table12.AddRow(new string[] {
                            "10"});
                table12.AddRow(new string[] {
                            "20"});
                table12.AddRow(new string[] {
                            "30"});
                table12.AddRow(new string[] {
                            "40"});
#line 91
 testRunner.Given("I define a table like", ((string)(null)), table12, "Given ");
#line hidden
#line 97
 testRunner.And("store as a set in a context under \'StoredArray\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table13.AddRow(new string[] {
                            "Id",
                            "2"});
                table13.AddRow(new string[] {
                            "Children",
                            "[StoredArray:1,3,2]"});
#line 98
 testRunner.And("I define a table like", ((string)(null)), table13, "And ");
#line hidden
#line 102
 testRunner.When("I request a complex instance with a context", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 103
 testRunner.Then("the result object should not be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table14.AddRow(new string[] {
                            "Id",
                            "2"});
                table14.AddRow(new string[] {
                            "Children[0].Id",
                            "20"});
                table14.AddRow(new string[] {
                            "Children[1].Id",
                            "40"});
                table14.AddRow(new string[] {
                            "Children[2].Id",
                            "30"});
#line 104
 testRunner.And("the result object should be", ((string)(null)), table14, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Using vertical table get an instance from a stored instance as a collection")]
        [Xunit.TraitAttribute("FeatureTitle", "Deserialization context")]
        [Xunit.TraitAttribute("Description", "Using vertical table get an instance from a stored instance as a collection")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void UsingVerticalTableGetAnInstanceFromAStoredInstanceAsACollection()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Using vertical table get an instance from a stored instance as a collection", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 112
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table15.AddRow(new string[] {
                            "Id",
                            "1"});
#line 113
 testRunner.Given("I define a table like", ((string)(null)), table15, "Given ");
#line hidden
#line 116
 testRunner.And("store as an instance in a context under \'StoredObject\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table16.AddRow(new string[] {
                            "Id",
                            "2"});
                table16.AddRow(new string[] {
                            "Children",
                            "[StoredObject]"});
#line 117
 testRunner.And("I define a table like", ((string)(null)), table16, "And ");
#line hidden
#line 121
 testRunner.When("I request a complex instance with a context", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 122
 testRunner.Then("the result object should not be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table17.AddRow(new string[] {
                            "Id",
                            "2"});
                table17.AddRow(new string[] {
                            "Children[0].Id",
                            "1"});
#line 123
 testRunner.And("the result object should be", ((string)(null)), table17, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use previous values of the table definition")]
        [Xunit.TraitAttribute("FeatureTitle", "Deserialization context")]
        [Xunit.TraitAttribute("Description", "Use previous values of the table definition")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void UsePreviousValuesOfTheTableDefinition()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use previous values of the table definition", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 129
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Complex",
                            "Integer",
                            "Children"});
                table18.AddRow(new string[] {
                            "10",
                            "",
                            "{_index_}",
                            ""});
                table18.AddRow(new string[] {
                            "20",
                            "{_previous_:0}",
                            "{_index_}",
                            ""});
                table18.AddRow(new string[] {
                            "30",
                            "{_previous_:0}",
                            "{_index_}",
                            ""});
                table18.AddRow(new string[] {
                            "40",
                            "{_previous_:1}",
                            "{_index_}",
                            ""});
                table18.AddRow(new string[] {
                            "50",
                            "",
                            "{_index_}",
                            "[_previous_]"});
#line 130
 testRunner.Given("I define a table like", ((string)(null)), table18, "Given ");
#line hidden
#line 137
 testRunner.When("I request a complex set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 138
 testRunner.Then("the result collection should have 5 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 139
 testRunner.And("the \'Id\' property of the item 0 should be \'10\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 140
 testRunner.And("the \'Integer\' property of the item 0 should be \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 141
 testRunner.And("the \'Id\' property of the item 1 should be \'20\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 142
 testRunner.And("the \'Integer\' property of the item 1 should be \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 143
 testRunner.And("the \'Complex.Id\' property of the item 1 should be \'10\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 144
 testRunner.And("the \'Id\' property of the item 2 should be \'30\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 145
 testRunner.And("the \'Integer\' property of the item 2 should be \'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 146
 testRunner.And("the \'Complex.Id\' property of the item 2 should be \'10\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 147
 testRunner.And("the \'Id\' property of the item 3 should be \'40\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 148
 testRunner.And("the \'Integer\' property of the item 3 should be \'3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 149
 testRunner.And("the \'Complex.Id\' property of the item 3 should be \'20\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 150
 testRunner.And("the \'Complex.Complext.Id\' property of the item 3 should be \'10\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 151
 testRunner.And("the \'Id\' property of the item 4 should be \'50\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 152
 testRunner.And("the \'Integer\' property of the item 4 should be \'4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 153
 testRunner.And("the \'Children\' property of the item 4 should have 4 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Try to get a key not stored in the context when returning an instance")]
        [Xunit.TraitAttribute("FeatureTitle", "Deserialization context")]
        [Xunit.TraitAttribute("Description", "Try to get a key not stored in the context when returning an instance")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void TryToGetAKeyNotStoredInTheContextWhenReturningAnInstance()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to get a key not stored in the context when returning an instance", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 156
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table19.AddRow(new string[] {
                            "Id",
                            "2"});
                table19.AddRow(new string[] {
                            "Complex",
                            "{Invalid}"});
#line 157
 testRunner.And("I define a table like", ((string)(null)), table19, "And ");
#line hidden
#line 161
 testRunner.When("I request a complex instance with a context with an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 162
 testRunner.Then("it should throw \'InvalidDataException\' with message \"The key \'Invalid\' was not fo" +
                        "und in the deserialization context at \'Complex\'.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Try to use an index with an object stored as an instance")]
        [Xunit.TraitAttribute("FeatureTitle", "Deserialization context")]
        [Xunit.TraitAttribute("Description", "Try to use an index with an object stored as an instance")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void TryToUseAnIndexWithAnObjectStoredAsAnInstance()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to use an index with an object stored as an instance", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 165
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table20.AddRow(new string[] {
                            "Id",
                            "1"});
#line 166
 testRunner.Given("I define a table like", ((string)(null)), table20, "Given ");
#line hidden
#line 169
 testRunner.And("store as an instance in a context under \'StoredObject\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table21.AddRow(new string[] {
                            "Id",
                            "2"});
                table21.AddRow(new string[] {
                            "Complex",
                            "{StoredObject:0}"});
#line 170
 testRunner.And("I define a table like", ((string)(null)), table21, "And ");
#line hidden
#line 174
 testRunner.When("I request a complex instance with a context with an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 175
 testRunner.Then("it should throw \'InvalidDataException\' with message \"The key \'StoredObject\' of th" +
                        "e deserialization context contains a single object and can\'t be used with an ind" +
                        "ex at \'Complex\'.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Try to use more than one index when returning an instance")]
        [Xunit.TraitAttribute("FeatureTitle", "Deserialization context")]
        [Xunit.TraitAttribute("Description", "Try to use more than one index when returning an instance")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void TryToUseMoreThanOneIndexWhenReturningAnInstance()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to use more than one index when returning an instance", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 178
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table22.AddRow(new string[] {
                            "Id",
                            "1"});
#line 179
 testRunner.Given("I define a table like", ((string)(null)), table22, "Given ");
#line hidden
#line 182
 testRunner.And("store as an instance in a context under \'StoredObject\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table23.AddRow(new string[] {
                            "Id",
                            "2"});
                table23.AddRow(new string[] {
                            "Complex",
                            "{StoredObject:1,2}"});
#line 183
 testRunner.And("I define a table like", ((string)(null)), table23, "And ");
#line hidden
#line 187
 testRunner.When("I request a complex instance with a context with an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 188
 testRunner.Then("it should throw \'InvalidDataException\' with message \"An instance value can not ha" +
                        "ve more than one index at \'Complex\'.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Try to assign a collection when returning an instance")]
        [Xunit.TraitAttribute("FeatureTitle", "Deserialization context")]
        [Xunit.TraitAttribute("Description", "Try to assign a collection when returning an instance")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void TryToAssignACollectionWhenReturningAnInstance()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to assign a collection when returning an instance", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 191
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
                table24.AddRow(new string[] {
                            "10"});
                table24.AddRow(new string[] {
                            "20"});
                table24.AddRow(new string[] {
                            "30"});
                table24.AddRow(new string[] {
                            "40"});
#line 192
 testRunner.Given("I define a table like", ((string)(null)), table24, "Given ");
#line hidden
#line 198
 testRunner.And("store as a set in a context under \'StoredArray\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table25.AddRow(new string[] {
                            "Id",
                            "2"});
                table25.AddRow(new string[] {
                            "Complex",
                            "{StoredArray}"});
#line 199
 testRunner.And("I define a table like", ((string)(null)), table25, "And ");
#line hidden
#line 203
 testRunner.When("I request a complex instance with a context with an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 204
 testRunner.Then("it should throw \'InvalidDataException\' with message \"The key \'StoredArray\' of the" +
                        " deserialization context contains a collection and can\'t be assigned to an insta" +
                        "nce without an index at \'Complex\'.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Try to apply a non-numeric index to stored collection when returning an instance")]
        [Xunit.TraitAttribute("FeatureTitle", "Deserialization context")]
        [Xunit.TraitAttribute("Description", "Try to apply a non-numeric index to stored collection when returning an instance")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void TryToApplyANon_NumericIndexToStoredCollectionWhenReturningAnInstance()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to apply a non-numeric index to stored collection when returning an instance", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 207
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
                table26.AddRow(new string[] {
                            "10"});
                table26.AddRow(new string[] {
                            "20"});
                table26.AddRow(new string[] {
                            "30"});
                table26.AddRow(new string[] {
                            "40"});
#line 208
 testRunner.Given("I define a table like", ((string)(null)), table26, "Given ");
#line hidden
#line 214
 testRunner.And("store as a set in a context under \'StoredArray\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table27.AddRow(new string[] {
                            "Id",
                            "2"});
                table27.AddRow(new string[] {
                            "Complex",
                            "{StoredArray:x}"});
#line 215
 testRunner.And("I define a table like", ((string)(null)), table27, "And ");
#line hidden
#line 219
 testRunner.When("I request a complex instance with a context with an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 220
 testRunner.Then("it should throw \'InvalidDataException\' with message \"\'x\' is not a valid index for" +
                        " the collection contained in the deserialization context under \'StoredArray\' at " +
                        "\'Complex\'.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Try to apply a negative index to stored collection when returning an instance")]
        [Xunit.TraitAttribute("FeatureTitle", "Deserialization context")]
        [Xunit.TraitAttribute("Description", "Try to apply a negative index to stored collection when returning an instance")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void TryToApplyANegativeIndexToStoredCollectionWhenReturningAnInstance()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to apply a negative index to stored collection when returning an instance", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 223
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
                table28.AddRow(new string[] {
                            "10"});
                table28.AddRow(new string[] {
                            "20"});
                table28.AddRow(new string[] {
                            "30"});
                table28.AddRow(new string[] {
                            "40"});
#line 224
 testRunner.Given("I define a table like", ((string)(null)), table28, "Given ");
#line hidden
#line 230
 testRunner.And("store as a set in a context under \'StoredArray\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table29.AddRow(new string[] {
                            "Id",
                            "2"});
                table29.AddRow(new string[] {
                            "Complex",
                            "{StoredArray:-1}"});
#line 231
 testRunner.And("I define a table like", ((string)(null)), table29, "And ");
#line hidden
#line 235
 testRunner.When("I request a complex instance with a context with an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 236
 testRunner.Then("it should throw \'InvalidDataException\' with message \"\'-1\' is not a valid index fo" +
                        "r the collection contained in the deserialization context under \'StoredArray\' at" +
                        " \'Complex\'.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Try to apply an index not contained in the stored collection when returning an in" +
            "stance")]
        [Xunit.TraitAttribute("FeatureTitle", "Deserialization context")]
        [Xunit.TraitAttribute("Description", "Try to apply an index not contained in the stored collection when returning an in" +
            "stance")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void TryToApplyAnIndexNotContainedInTheStoredCollectionWhenReturningAnInstance()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to apply an index not contained in the stored collection when returning an in" +
                    "stance", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 239
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
                table30.AddRow(new string[] {
                            "10"});
                table30.AddRow(new string[] {
                            "20"});
                table30.AddRow(new string[] {
                            "30"});
                table30.AddRow(new string[] {
                            "40"});
#line 240
 testRunner.Given("I define a table like", ((string)(null)), table30, "Given ");
#line hidden
#line 246
 testRunner.And("store as a set in a context under \'StoredArray\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table31.AddRow(new string[] {
                            "Id",
                            "2"});
                table31.AddRow(new string[] {
                            "Complex",
                            "{StoredArray:4}"});
#line 247
 testRunner.And("I define a table like", ((string)(null)), table31, "And ");
#line hidden
#line 251
 testRunner.When("I request a complex instance with a context with an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 252
 testRunner.Then("it should throw \'InvalidDataException\' with message \"\'4\' is not a valid index for" +
                        " the collection contained in the deserialization context under \'StoredArray\' at " +
                        "\'Complex\'.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Try to get a key not stored in the context when returning a collection")]
        [Xunit.TraitAttribute("FeatureTitle", "Deserialization context")]
        [Xunit.TraitAttribute("Description", "Try to get a key not stored in the context when returning a collection")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void TryToGetAKeyNotStoredInTheContextWhenReturningACollection()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to get a key not stored in the context when returning a collection", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 255
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table32.AddRow(new string[] {
                            "Id",
                            "2"});
                table32.AddRow(new string[] {
                            "Children",
                            "[Invalid]"});
#line 256
 testRunner.And("I define a table like", ((string)(null)), table32, "And ");
#line hidden
#line 260
 testRunner.When("I request a complex instance with a context with an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 261
 testRunner.Then("it should throw \'InvalidDataException\' with message \"The key \'Invalid\' was not fo" +
                        "und in the deserialization context at \'Children\'.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Try to apply an index to a stored instance when returning a collection")]
        [Xunit.TraitAttribute("FeatureTitle", "Deserialization context")]
        [Xunit.TraitAttribute("Description", "Try to apply an index to a stored instance when returning a collection")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void TryToApplyAnIndexToAStoredInstanceWhenReturningACollection()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to apply an index to a stored instance when returning a collection", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 264
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table33.AddRow(new string[] {
                            "Id",
                            "1"});
#line 265
 testRunner.Given("I define a table like", ((string)(null)), table33, "Given ");
#line hidden
#line 268
 testRunner.And("store as an instance in a context under \'StoredObject\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table34.AddRow(new string[] {
                            "Id",
                            "2"});
                table34.AddRow(new string[] {
                            "Children",
                            "[StoredObject:1]"});
#line 269
 testRunner.And("I define a table like", ((string)(null)), table34, "And ");
#line hidden
#line 273
 testRunner.When("I request a complex instance with a context with an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 274
 testRunner.Then("it should throw \'InvalidDataException\' with message \"The key \'StoredObject\' of th" +
                        "e deserialization context does not contain a collection at \'Children\'.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Try to apply a non-numeric index to stored collection when returning a collection" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "Deserialization context")]
        [Xunit.TraitAttribute("Description", "Try to apply a non-numeric index to stored collection when returning a collection" +
            "")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void TryToApplyANon_NumericIndexToStoredCollectionWhenReturningACollection()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to apply a non-numeric index to stored collection when returning a collection" +
                    "", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 277
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
                table35.AddRow(new string[] {
                            "10"});
                table35.AddRow(new string[] {
                            "20"});
                table35.AddRow(new string[] {
                            "30"});
                table35.AddRow(new string[] {
                            "40"});
#line 278
 testRunner.Given("I define a table like", ((string)(null)), table35, "Given ");
#line hidden
#line 284
 testRunner.And("store as a set in a context under \'StoredArray\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table36.AddRow(new string[] {
                            "Id",
                            "2"});
                table36.AddRow(new string[] {
                            "Children",
                            "[StoredArray:x,2]"});
#line 285
 testRunner.And("I define a table like", ((string)(null)), table36, "And ");
#line hidden
#line 289
 testRunner.When("I request a complex instance with a context with an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 290
 testRunner.Then("it should throw \'InvalidDataException\' with message \"\'x,2\' is not a valid set of " +
                        "indexes for the collection contained in the deserialization context under \'Store" +
                        "dArray\' at \'Children\'.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Try to apply a negative index to stored collection when returning a collection")]
        [Xunit.TraitAttribute("FeatureTitle", "Deserialization context")]
        [Xunit.TraitAttribute("Description", "Try to apply a negative index to stored collection when returning a collection")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void TryToApplyANegativeIndexToStoredCollectionWhenReturningACollection()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to apply a negative index to stored collection when returning a collection", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 293
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
                table37.AddRow(new string[] {
                            "10"});
                table37.AddRow(new string[] {
                            "20"});
                table37.AddRow(new string[] {
                            "30"});
                table37.AddRow(new string[] {
                            "40"});
#line 294
 testRunner.Given("I define a table like", ((string)(null)), table37, "Given ");
#line hidden
#line 300
 testRunner.And("store as a set in a context under \'StoredArray\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table38.AddRow(new string[] {
                            "Id",
                            "2"});
                table38.AddRow(new string[] {
                            "Children",
                            "[StoredArray:-1,2]"});
#line 301
 testRunner.And("I define a table like", ((string)(null)), table38, "And ");
#line hidden
#line 305
 testRunner.When("I request a complex instance with a context with an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 306
 testRunner.Then("it should throw \'InvalidDataException\' with message \"\'-1,2\' is not a valid set of" +
                        " indexes for the collection contained in the deserialization context under \'Stor" +
                        "edArray\' at \'Children\'.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Try to apply an index not contained in the stored collection when returning a col" +
            "lection")]
        [Xunit.TraitAttribute("FeatureTitle", "Deserialization context")]
        [Xunit.TraitAttribute("Description", "Try to apply an index not contained in the stored collection when returning a col" +
            "lection")]
        [Xunit.TraitAttribute("Category", "Deserializer")]
        public virtual void TryToApplyAnIndexNotContainedInTheStoredCollectionWhenReturningACollection()
        {
            string[] tagsOfScenario = new string[] {
                    "Deserializer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to apply an index not contained in the stored collection when returning a col" +
                    "lection", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 309
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
                table39.AddRow(new string[] {
                            "10"});
                table39.AddRow(new string[] {
                            "20"});
                table39.AddRow(new string[] {
                            "30"});
                table39.AddRow(new string[] {
                            "40"});
#line 310
 testRunner.Given("I define a table like", ((string)(null)), table39, "Given ");
#line hidden
#line 316
 testRunner.And("store as a set in a context under \'StoredArray\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table40.AddRow(new string[] {
                            "Id",
                            "2"});
                table40.AddRow(new string[] {
                            "Children",
                            "[StoredArray:4,5]"});
#line 317
 testRunner.And("I define a table like", ((string)(null)), table40, "And ");
#line hidden
#line 321
 testRunner.When("I request a complex instance with a context with an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 322
 testRunner.Then("it should throw \'InvalidDataException\' with message \"\'4,5\' is not a valid set of " +
                        "indexes for the collection contained in the deserialization context under \'Store" +
                        "dArray\' at \'Children\'.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                DeserializationContextFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                DeserializationContextFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
